#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

echo "🚀 Pre-push checks starting..."

# 색상 정의
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# 결과 추적 변수
LINT_PASSED=false
FORMAT_PASSED=false
TEST_PASSED=false
CODE_CONVENTION_PASSED=false

echo -e "${BLUE}🔍 Lint check starting...${NC}"

# Lint 실행 (src 폴더만)
if pnpm run lint; then
    echo -e "${GREEN}✅ Lint check passed!${NC}"
    LINT_PASSED=true
else
    echo -e "${RED}❌ Lint check failed!${NC}"
    echo -e "${RED}CLI Lint 실패${NC}"
    LINT_PASSED=false
fi

echo ""
echo -e "${BLUE}🎨 Format check starting...${NC}"

# Prettier 포맷 체크
if pnpm run format:check; then
    echo -e "${GREEN}✅ Format check passed!${NC}"
    FORMAT_PASSED=true
else
    echo -e "${RED}❌ Format check failed!${NC}"
    echo -e "${RED}코드 포맷팅 실패${NC}"
    echo -e "${YELLOW}💡 Run 'pnpm run format' to fix formatting issues${NC}"
    FORMAT_PASSED=false
fi

echo ""
echo -e "${BLUE}🧪 Test check starting...${NC}"

# Test 실행
if pnpm test; then
    echo -e "${GREEN}✅ Test check passed!${NC}"
    TEST_PASSED=true
else
    echo -e "${RED}❌ Test check failed!${NC}"
    echo -e "${RED}테스트코드 실패${NC}"
    TEST_PASSED=false
fi

echo ""
# echo -e "${BLUE}🤖 AI 코드 컨벤션 검사 시작...${NC}"

# 변경된 파일들의 diff 가져오기
# CHANGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep "^src/")
# if [ -n "$CHANGED_FILES" ]; then
#     # 변경된 파일들의 diff 내용 가져오기
#     DIFF_CONTENT=$(git diff --cached --unified=0)
    
#     # AI로 코드 컨벤션 검사
#     CODE_CONVENTION_CHECK=$(echo "다음 코드 변경사항이 React/TypeScript 컨벤션을 따르는지 검사해주세요.

# 변경된 파일들:
# $CHANGED_FILES

# 변경 내용:
# $DIFF_CONTENT

# 검사 기준:
# 1. 컴포넌트는 함수형으로 작성되었는가?
# 2. 적절한 TypeScript 타입을 사용했는가?
# 3. React Hooks 규칙을 준수했는가?
# 4. 불필요한 리렌더링을 방지하는 최적화가 적용되었는가?
# 5. 의미있는 변수명과 함수명을 사용했는가?
# 6. 적절한 에러 처리가 되어 있는가?
# 7. 접근성(accessibility)을 고려했는가?

# 문제가 있으면 'FAIL'로 시작하고, 구체적인 파일명과 라인, 문제점을 설명해주세요.
# 문제가 없으면 'PASS'로 시작하고, '코드 컨벤션 준수'라고 답해주세요." | gemini -p "코드 컨벤션 검사 결과만 간단히 답해주세요.")

#     if echo "$CODE_CONVENTION_CHECK" | grep -q "^PASS"; then
#         echo -e "${GREEN}✅ 코드 컨벤션 검사 통과!${NC}"
#         CODE_CONVENTION_PASSED=true
#     else
#         echo -e "${RED}❌ 코드 컨벤션 검사 실패!${NC}"
#         echo -e "${YELLOW}문제점:${NC}"
#         echo "$CODE_CONVENTION_CHECK" | sed 's/^FAIL//'
        
#         # AI가 개선 제안
#         echo ""
#         echo -e "${BLUE}🤖 AI가 코드 개선 방안을 제안합니다...${NC}"
        
#         IMPROVEMENT_SUGGESTION=$(echo "다음 코드 변경사항에 대한 개선 방안을 제안해주세요.

# 변경된 파일들:
# $CHANGED_FILES

# 변경 내용:
# $DIFF_CONTENT

# 개선 방안을 간단하고 구체적으로 제안해주세요." | gemini -p "코드 개선 방안만 간단히 제안해주세요.")
        
#         if [ $? -eq 0 ] && [ -n "$IMPROVEMENT_SUGGESTION" ]; then
#             echo -e "${GREEN}💡 개선 제안:${NC}"
#             echo "$IMPROVEMENT_SUGGESTION"
#         fi
        
#         CODE_CONVENTION_PASSED=false
#     fi
# else
#     echo -e "${YELLOW}⚠️  src 폴더에 변경된 파일이 없어 코드 컨벤션 검사를 건너뜁니다.${NC}"
#     CODE_CONVENTION_PASSED=true
# fi

echo ""

# 최종 결과 확인
if [ "$LINT_PASSED" = true ] && [ "$FORMAT_PASSED" = true ] && [ "$TEST_PASSED" = true ]; then
    echo -e "${GREEN}🎉 All checks passed! Push will proceed.${NC}"
    exit 0
else
    echo -e "${RED}🚫 Push blocked due to failed checks:${NC}"
    
    if [ "$LINT_PASSED" = false ]; then
        echo -e "${RED}  - Lint check failed${NC}"
    fi
    
    if [ "$FORMAT_PASSED" = false ]; then
        echo -e "${RED}  - Format check failed${NC}"
    fi
    
    if [ "$TEST_PASSED" = false ]; then
        echo -e "${RED}  - Test check failed${NC}"
    fi
    
    # if [ "$CODE_CONVENTION_PASSED" = false ]; then
    #     echo -e "${RED}  - Code convention check failed${NC}"
    # fi
    
    echo ""
    echo -e "${YELLOW}💡 Fix the issues above and try pushing again.${NC}"
    exit 1
fi 