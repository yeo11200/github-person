#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# Commit 전 간단한 검증
echo "🔍 Pre-commit checks..."

# TypeScript 타입 체크 (선택사항)
# npm run type-check

# Lint 체크 (선택사항)
# npm run lint

echo "✅ Pre-commit checks passed!"

# Gemini CLI를 사용한 커밋 메시지 자동 생성
echo "🤖 Gemini CLI 커밋 메시지 생성 중..."

# 변경된 파일들 가져오기
CHANGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)

if [ -n "$CHANGED_FILES" ]; then
    echo "📝 변경된 파일들:"
    echo "$CHANGED_FILES"
    
    # 변경 내용 요약 생성
    DIFF_SUMMARY=$(git diff --cached --stat)
    
    # Gemini CLI로 커밋 메시지 생성
    COMMIT_MESSAGE=$(echo "다음 변경사항을 바탕으로 한국어 커밋 메시지를 생성해주세요. Conventional Commits 형식을 사용하고, 변경사항을 명확하게 설명해주세요:

변경된 파일들:
$CHANGED_FILES

변경 내용 요약:
$DIFF_SUMMARY

커밋 메시지 형식:
- feat: 새로운 기능 추가
- fix: 버그 수정
- docs: 문서 수정
- style: 코드 스타일 변경
- refactor: 코드 리팩토링
- test: 테스트 추가/수정
- chore: 빌드 프로세스 또는 보조 도구 변경

한 줄로 간결하게 작성해주세요." | gemini -p "한 줄로 간결하게 작성해주세요.")
    
    if [ $? -eq 0 ] && [ -n "$COMMIT_MESSAGE" ]; then
        echo "📋 생성된 커밋 메시지:"
        echo "$COMMIT_MESSAGE"
        
        # 커밋 메시지를 임시 파일에 저장
        echo "$COMMIT_MESSAGE" > .git/COMMIT_MSG_TEMP
        
        echo "💡 다음 명령어로 커밋하세요:"
        echo "git commit -F .git/COMMIT_MSG_TEMP"
        echo ""
        echo "또는 직접 커밋 메시지를 입력하세요:"
        echo "git commit -m \"$COMMIT_MESSAGE\""
    else
        echo "⚠️  커밋 메시지 생성 실패. 수동으로 입력해주세요."
    fi
else
    echo "📝 변경된 파일이 없습니다."
fi 