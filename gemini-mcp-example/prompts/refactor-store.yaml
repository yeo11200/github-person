id: refactor-store
model: gemini-pro
temperature: 0.1
input_vars: ["code", "structure"]
prompt: |
  시니어 프론트엔드 아키텍트로서 다음 상태 관리 코드를 성능, 예측 가능성, 확장성에 중점을 두고 리팩토링하세요.

  원본 코드:
  ```typescript
  {{code}}
  ```

  프로젝트 구조:
  ```
  {{structure}}
  ```

  ## 📁 Import 경로 규칙:
  - ✅ **절대경로 우선**: tsconfig에 `@/*` 또는 절대경로 설정이 있으면 반드시 절대경로 사용
  - ✅ **일관성 유지**: 기존 코드의 import 패턴 분석 후 동일한 방식 적용
  - ✅ **예시**: `import { ApiService } from '@/services/api'` (절대경로 설정시)
  - ✅ **예시**: `import { User } from '@/types/user'` (절대경로 설정시)

  ## 🏪 범용 상태 관리 리팩토링 핵심 원칙:

  ### 1. 상태 관리 라이브러리 자동 감지:
  - ✅ Zustand: 슬라이스 패턴, 미들웨어 활용
  - ✅ Redux Toolkit: createSlice, RTK Query 활용  
  - ✅ Context API: Provider 최적화, 분리된 컨텍스트
  - ✅ Jotai: 원자 단위 상태 관리
  - ✅ Valtio: 프록시 기반 상태 관리

  ### 2. 공통 최적화 원칙:
  - ✅ 불변성 보장 및 성능 최적화
  - ✅ 타입 안전성 강화
  - ✅ 선택적 구독으로 리렌더링 최소화
  - ✅ 비동기 상태 표준화 (로딩/에러/성공)

  ### 3. 아키텍처 패턴:
  - ✅ 관심사 분리 (상태 vs 액션 vs 셀렉터)
  - ✅ 계층화된 구조 (도메인별 분리)
  - ✅ 미들웨어 활용한 횡단 관심사 처리
  - ✅ 테스트 가능한 구조 설계

  ## 🔧 라이브러리별 최적화 패턴:

  ### Zustand 패턴:
  ```typescript
  // ✅ 절대경로 사용 (tsconfig 설정시)
  import { create, StateCreator } from 'zustand';
  import { devtools, persist } from 'zustand/middleware';
  import { ApiService } from '@/services/api';
  import { User } from '@/types/user';

  // 슬라이스 패턴 + 미들웨어
  const useStore = create<Store>()(
    devtools(
      persist(
        immer((set, get) => ({
          // 상태와 액션 분리
        })),
        { name: 'store-name' }
      )
    )
  );
  ```

  ### Redux Toolkit 패턴:
  ```typescript
  // ✅ 절대경로 사용 (tsconfig 설정시)
  import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
  import { ApiService } from '@/services/api';
  import { User } from '@/types/user';

  // createSlice + RTK Query
  const slice = createSlice({
    name: 'feature',
    initialState,
    reducers: { /* 동기 액션 */ },
    extraReducers: (builder) => {
      // 비동기 액션 처리
    }
  });
  ```

  ### Context API 패턴:
  ```typescript
  // ✅ 절대경로 사용 (tsconfig 설정시)
  import { createContext, useContext, useMemo } from 'react';
  import { ApiService } from '@/services/api';
  import { User } from '@/types/user';

  // 분리된 컨텍스트 + 커스텀 훅
  const StateContext = createContext();
  const DispatchContext = createContext();

  export const useStateSelector = (selector) => {
    const state = useContext(StateContext);
    return useMemo(() => selector(state), [state, selector]);
  };
  ```

  ## 🚀 고급 최적화 기법:

  ### 1. 선택적 구독:
  ```typescript
  // 필요한 상태만 구독
  const data = useStore(state => state.data, shallow);
  const actions = useStore(state => state.actions, shallow);
  ```

  ### 2. 메모이제이션된 셀렉터:
  ```typescript
  const selectComputedValue = useMemo(
    () => createSelector(
      [selectRawData],
      (data) => expensiveComputation(data)
    ),
    []
  );
  ```

  ### 3. 비동기 상태 래퍼:
  ```typescript
  interface AsyncState<T> {
    data: T | null;
    loading: boolean;
    error: string | null;
    lastFetch: number | null;
  }
  ```

  ### 4. 옵티미스틱 업데이트:
  ```typescript
  const optimisticUpdate = async (optimisticData, apiCall, rollback) => {
    // 즉시 UI 업데이트 → API 호출 → 실패시 롤백
  };
  ```

  ## 📋 출력 형식:

  ---
  ## 📄 파일: `개선된_파일명.ts`
  ```typescript
  [리팩토링된 상태 관리 코드]
  [절대경로 우선 사용, 감지된 라이브러리에 맞는 최적화 패턴 적용]
  [타입 안전성, 성능 최적화, 테스트 용이성 보장]
  [JSDoc 문서화 포함]
  ```

  ---

  **중요 규칙:**
  - 설명 없이 실행 가능한 코드만 출력
  - 사용 중인 상태 관리 라이브러리 자동 감지 후 최적화
  - 모든 액션과 셀렉터에 JSDoc 문서화 추가
  - 성능과 개발자 경험 동시 고려
  - 테스트하기 쉬운 구조로 설계
  - **절대경로 설정이 있으면 반드시 절대경로 사용**

  지금 바로 위 형식으로 리팩토링된 코드를 출력하세요:
